<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.kalpa.olivia.repository.BoardRepository">
   <sql id="whereCondition">
		<!--    검색조건 -->
   		<if test="status != null">
	       	AND status = #{status}
		</if>		

   		<if test="dateRangeCheck">
	       	AND TO_CHAR(CURRENT_DATE, 'YYYYMMDD') between start_ymd and end_ymd
		</if>		
		
   		<if test="boardId != null">
	       	AND board_id = #{boardId}
		</if>		
   		<if test="searchText != null">
	       	AND concat(title, ' ', content) like concat('%',#{searchText},'%')
		</if>
   </sql>	
	<select id="selectCount" parameterType="QueryAttr" resultType="Integer">
   		SELECT 
   			count(*) as count
   		FROM
   			board
   		WHERE 1=1
   			<include refid="whereCondition"/>	
   </select> 
   <select id="selectBoardOne" parameterType="Board" resultType="Board">
   	select 
	   		 board_id as boardId
	   		,board_type as boardType
			,title as title
			,content  as content
			,view_count as viewCount
			,start_ymd as startYmd
			,end_ymd as endYmd
			,status as status
			,create_on as createOn
			,create_by as createBy   		
   	from 
   		board
   	where 
   		board_id = ${boardId}
   </select>
   <select id="selectList" parameterType="QueryAttr" resultType="Board">
   	   /** 게시판의 리스트 조회*/
	   SELECT 
	   		 board_id as boardId
	   		,board_type as boardType
			,title as title
			<if test="includeContent">
			,content  as content
			</if>
			,view_count as viewCount
			,start_ymd as startYmd
			,end_ymd as endYmd
			,status as status
			,last_modify_on as lastModifyOn
			,modify_count as modifyCount
			,create_on as createOn
			,create_by as createBy
			,(
				select count(*) 
				from board_file  
				where board_id  = A.board_id
			) AS attached_file_count
	   FROM 
	   		board A
	   WHERE 1=1
	   	<include refid="whereCondition"/>
	   ORDER BY boardId desc
	   <if test="pageAttr != null">	
	   OFFSET #{pageAttr.offset} LIMIT #{pageAttr.limit}
	   </if>
   </select>
   <select id="selectOne" parameterType="Board" resultType="Board">
   		/** 게시판의 1개 조회*/
	   SELECT 
	   		 board_id as boardId
	   		,board_type as boardType
			,title as as title
			,content  as content
			,view_count as viewCount
			,start_ymd as startYmd
			,end_ymd as endYmd
			,status as status
			,create_on as createOn
			,create_by as createBy
	   FROM 
	   		board
	   WHERE 1=1
	       	AND board_id = #{boardId}
   </select>

   <insert id="insert" parameterType="Board" useGeneratedKeys="true" keyProperty="boardId">
	   /** 게시판 추가*/
	   INSERT INTO public.board (
	      board_type, title, "content", view_count, start_ymd, end_ymd, status, create_by
	    ) VALUES (
	      #{boardType}, #{title}, #{content}, 0, replace(#{startYmd},'-',''), replace(#{endYmd},'-',''), COALESCE(#{status},'0'), #{createBy}
	    )
	    RETURNING board_id
   </insert>
   
 <update id="update" parameterType="Board">
 	/** 게시판 update*/
    UPDATE public.board
    SET
      board_type = #{boardType},
      title = #{title},
      content = #{content},
      view_count = #{viewCount},
      start_ymd = replace(#{startYmd},'-',''),
      end_ymd = replace(#{endYmd},'-',''),
      status = COALESCE(#{status},'0')
    WHERE
      board_id = #{boardId}
  </update>  
  <delete id="delete" parameterType="Integer">
  	delete from board where board_id = ${value}
  </delete>
  
  <insert id="insertTags" parameterType="Tags" useGeneratedKeys="true" keyProperty="tagId">
    /** insertBoardTag :  태그 추가 */
	INSERT INTO public.tags
		("name")
	VALUES
		( #{name})
	 RETURNING tag_id
  </insert>

  
  <insert id="insertBoardFile" parameterType="BoardFile" useGeneratedKeys="true" keyProperty="board_file_id">
  	/** 게시판 첨부파일  추가 */
  	INSERT INTO public.board_file
	( board_id, seq,  phy_folder, phy_name, org_name, mime_type, file_size, ext, note, create_on, create_by)
	VALUES
	( #{boardId}, #{seq}, #{phyFolder}, #{phyName}, #{orgName}, #{mimeType}, #{fileSize}, #{ext}, #{note}, CURRENT_TIMESTAMP, #{createBy});
	RETURNING board_file_id
  </insert>
  
  <insert id="insertBoardTagMatch" parameterType="BoardTagMatch">
  	/** insertBoardTagMatch */
  	INSERT INTO public.board_tag_match
	(board_id, tag_id)
	VALUES
	(#{boardId}, #{tagId});
  
  </insert>
  <select id="selectOneTag" parameterType="Tags" resultType="Tags">
    /* 1개의 Tags 조회*/
  	select 
  		tag_id as tagId, 
  		name 
  	from public.tags 
  	where 1=1
  	<if test="name != null">
  		and name = #{name}
  	</if>
  	<if test="tagId != null">
  		tag_id = #{tagId}
  	</if>	
  </select>

  <select id="selectTagList" parameterType="Long" resultType="Tags">
	/* board_id로 tag들 리스트 조회*/
	select 
	 B.tag_id as tagId
	 ,B.name as name
	from 
		board_tag_match A
		inner join tags B on A.tag_id  = B.tag_id 
	where
		A.board_id  = #{value}	  	
  </select>
  
  <select id="selectFileList"  parameterType="Long" resultType="BoardFile">
	/** board_id에 소속된 BoardFile을 조회*/
	select 
		  B.board_file_id AS boardFileId 
		, B.phy_folder    AS phyFolder   
		, B.phy_name      AS phyName     
		, B.org_name      AS orgName     
		, B.mime_type     AS mimeType    
		, B.file_size     AS fileSize    
		, B.ext           AS ext         
		, B.note          AS note        
		, B.create_on     AS createOn    
		, B.create_by     AS createBy
	from 
		board_file_match A 
		inner join board_file B on A.board_file_id  = B.board_file_id 
	where 1=1
		and A.board_id  = #{value}
	order by A.seq   
  </select>
  
  <delete id="deleteBoardFileWithFileId" parameterType="Long">
  	delete from public.board_file where board_file_id = #{boardFileId};
  </delete>

  <delete id="deleteBoardTagMatch" parameterType="Integer">
  	/** board_tag_match에서 board_id로 삭제*/
  	delete from 
  		board_tag_match 
  	where 
  		board_id = #{value}
  </delete>
  
  <delete id="deleteBoardTagMatchWithBoardId" parameterType="Long">
  	/* board_tag_match 를 board_id로 모두 삭제 */
  	delete from board_tag_match where board_id = #{value}
  </delete>
</mapper>